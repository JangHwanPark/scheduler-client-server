plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.game'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
}

tasks.register('buildReact', Exec) {
	workingDir 'src/main/frontend'

	def os = org.gradle.internal.os.OperatingSystem.current()
	if (os.isWindows()) commandLine 'C:/Program Files/nodejs/npm.cmd', 'run', 'build'
	else commandLine 'npm', 'run', 'build'

	environment 'PATH', System.getenv('PATH')
	doLast {
		println 'React build finished'
	}
}

tasks.register('copyReactBuild', Copy) {
	dependsOn 'buildReact'
	from 'src/main/frontend/dist'
	into 'src/main/resources/static'
}

tasks.register('startReact', Exec) {
	workingDir 'src/main/frontend'

	def os = org.gradle.internal.os.OperatingSystem.current()
	if (os.isWindows()) commandLine 'C:/Program Files/nodejs/npm.cmd', 'run', 'dev'
	else commandLine 'npm', 'run', 'dev'

	environment 'PATH', System.getenv('PATH')
	doLast {
		println 'React development server started'
	}
}

tasks.named('processResources') {
	dependsOn 'copyReactBuild'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('bootRun') {
	dependsOn 'startReact'
	doFirst {
		tasks.named('startReact').get().mustRunAfter 'clean'
	}
}

bootJar {
	dependsOn copyReactBuild
}